use Test;
use Distribution::Extension::Updater;
use Directory;

plan 17;

setup();


my $distro;
lives-ok { $distro = Distribution::Extension::Updater.new(); },
        'lives without argument passed';
#lives-ok { $distro.has-git }, 'detects if git installed';
dies-ok { $distro = Distribution::Extension::Updater.new('fzlxxx')},
        'dies with bad path';
lives-ok { $distro = Distribution::Extension::Updater.new(dir => 't/dirty')},
        'survives with good path';
dies-ok { $distro = Distribution::Extension::Updater.new(dir => 'fzlxxx')},
        'dies with bad path with named parameter';
dies-ok { $distro = Distribution::Extension::Updater.new(zzz => 't')},
        'dies with bad parameter';

$distro.has-legacy-extensions;
ok $distro.ext<t>, 'finds t file';
ok $distro.ext<pod6>, 'finds pod6 files';
ok $distro.ext<pod>, 'finds pod files';
ok $distro.ext<pm6>, 'finds pmy6 files';;
ok $distro.ext<pm>, 'finds pm files';
ok $distro.ext<p6>, 'finds p6 files';
$distro.report;

is True, $distro.has-legacy-extensions, 'reports has-legacy-extensions';
is True, $distro.has-legacy-extensions('pod6'), 'reports has-legacy-extensions';
is True, $distro.has-legacy-extensions('pm6'), 'reports has-legacy-extensions';
is True, $distro.has-legacy-extensions('pod'), 'reports has-legacy-extensions';
$distro.update-extensions('t');
$distro.update-extensions('pod');
$distro.update-extensions('pm6', 'pm');
$distro.update-extensions('p6', 'pod6');

$distro = Distribution::Extension::Updater.new(dir => 't/clean');
is False, $distro.has-legacy-extensions, 'reports no legacy extensions';

$distro = Distribution::Extension::Updater.new(dir => 't/dupes');
dies-ok { $distro.update-extensions }, 'stops if dupes will be created';

#$distro.get-meta;

sub create-file(Str:D $name, Str:D $dir) {
    my $file = "t/$dir/$name";
    my $fh = $file.IO.open(:create);
    $fh.close;
}

sub setup() {
    Directory.new('t/clean').empty-directory;
    Directory.new('t/dirty').empty-directory;
    Directory.new('t/dupes').empty-directory;
    Directory.new('t/clean/.git').mktree;
    Directory.new('t/dirty/.git').mktree;
    Directory.new('t/dirty/.precomp').mktree;
    Directory.new('t/dirty/resources').mktree;
    Directory.new('t/dupes/.git').mktree;
    copy "t/meta-file/META6.json".IO, 't/dupes/META6.json'.IO;
    copy "t/meta-file/META6.json".IO, 't/clean/META6.json'.IO;
    copy "t/meta-file/META6.json".IO, 't/dirty/META6.json'.IO;

    create-file 'test1.t', 'dirty';
    create-file 'test2.pod6', 'dirty';
    create-file 'test3.pod', 'dirty';
    create-file 'test4.pm6', 'dirty';
    create-file 'test5.pm', 'dirty';
    create-file 'test6.p6', 'dirty';
    create-file 'resources/test7.p6', 'dirty';
    create-file 'test.rakumod', 'clean';
    create-file 'test.pod', 'dupes';
    create-file 'test.pod6', 'dupes';
}

done-testing;
